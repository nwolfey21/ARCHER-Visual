#ifndef _RK4_KERNEL_H_
#define _RK4_KERNEL_H_

#include <stdio.h>
#include <cuComplex.h>
#include "init.h"

__constant__ cuDoubleComplex difacr;
__constant__ cuDoubleComplex difacn;
__constant__ cuDoubleComplex domegatau;
__constant__ cuDoubleComplex dmc1;

__constant__ cuDoubleComplex ds1;
__constant__ cuDoubleComplex ds2;
__constant__ cuDoubleComplex ds3;
__constant__ cuDoubleComplex ds4;
__constant__ cuDoubleComplex ds5;
__constant__ cuDoubleComplex ds6;

__constant__ cuDoubleComplex coe1;
__constant__ cuDoubleComplex coe2;
__constant__ cuDoubleComplex omeg;
__constant__ cuDoubleComplex justI;
__constant__ cuDoubleComplex two;
__constant__ cuDoubleComplex c1;
__constant__ cuDoubleComplex c2;
__constant__ cuDoubleComplex c3;
__constant__ cuDoubleComplex c4;
__constant__ cuDoubleComplex four;
__constant__ cuDoubleComplex twel;
__constant__ cuDoubleComplex zero;
__constant__ cuDoubleComplex cx1;
__constant__ cuDoubleComplex csig;
__constant__ cuDoubleComplex cone;
__constant__ cuDoubleComplex c11;
__constant__ double dconsp1;
__constant__ double dconsp2;
__constant__ double dconsp3;
__constant__ int dmp;
__constant__ cuDoubleComplex dE0;
__constant__ cuDoubleComplex ddt;
__constant__ cuDoubleComplex dcon5;
__constant__ cuDoubleComplex d2dr;

__global__ void update(cuDoubleComplex* df, cuDoubleComplex* dfold, cuDoubleComplex* k1, cuDoubleComplex c11, int nr, int nt){

	unsigned int k;
	unsigned int i = threadIdx.x + blockIdx.x*blockDim.x;

	unsigned int n;

  	for (k = 0; k < nt; k++) {

		n = i + k*nr;

		df[n] = cuCadd(dfold[n],cuCmul(c11,k1[n]));
	}
}


//__global__ void rk(cuDoubleComplex* df, cuDoubleComplex* drho, cuDoubleComplex* d, cuDoubleComplex* devt2, cuDoubleComplex cons1, double dr, int nr, int nt, cuDoubleComplex* dtemp, cuDoubleComplex* ddr){
__global__ void rk(cuDoubleComplex* df, cuDoubleComplex* dfnex, cuDoubleComplex* dfprev, cuDoubleComplex* drho, cuDoubleComplex* d, cuDoubleComplex* devt2, cuDoubleComplex* devt2nex, cuDoubleComplex* devt2prev, cuDoubleComplex cons1, double dr, int nr, int tstart, int tend, cuDoubleComplex* dtemp, int commRank, int commSize, cuDoubleComplex* ddr )
{
	unsigned int k, mm;
	unsigned int i = threadIdx.x + blockIdx.x*blockDim.x;

	unsigned int n;

	int sindex = threadIdx.x;

	unsigned int tx = threadIdx.x;

	const int SZ = (xthreads);

	__shared__ cuDoubleComplex dfuns[SZ]; 

	cuDoubleComplex gvd, lap, devt, temp1, temp2, temp3, p1, p2, ccjm1, ccjp1, fp1, fm1, ab, p3, p4, p5, p6, consm;
	cuDoubleComplex tp1, tp2, du, deltr;
	cuDoubleComplex right, left, dev2p1, dev2m1;

	p1 = zero;
	p2 = zero;
	p3 = zero;
	p4 = zero;
	p5 = zero;
	p6 = zero;
	temp1 = zero;
	temp2 = zero;
	temp3 = zero;
	gvd = zero;
	lap = zero;
	devt = zero;
	ab = zero;
	consm = zero;
	tp1 = zero;
	tp2 = zero;

	du.x = 2.0;
	du.y = 0.0;

	deltr.x = 1.0/(dr*dr);
	deltr.y = 0.0;

	int dnt = (tend - tstart)*commSize;
	int mid, indx;
	int tp = -1;

	if(commRank > 0){
		mid = dnt/commSize;
		indx = (mid-1)*nr;
	}

	int is, ie;
	if(commSize == 1)
	{
		is = tstart;
		ie = tend-1;	
	
	}
	else if(commSize > 1 && commRank == 0)
	{
		is = tstart;
		ie = tend;

	}
	else if(commSize > 1 && commRank != 0 && commRank != (commSize-1))
	{
		is = tstart -1;
		ie = tend;

	}
	else if(commSize > 1 && commRank == (commSize -1))
	{
		is = tstart -1;
		ie = tend-1;
	}

__syncthreads();

  	for (k = tstart; k < tend; k++) 
	{
		tp = tp + 1;
		n = i + tp*nr;

	      dfuns[sindex]      = df[n];
//		drhos[sindex]	   = drho[n];

	    	__syncthreads();

		if(i < nr-1 )
		{
			if(tx == (blockDim.x-1))
			{
				right = df[n+1];
			}
			else
			{
				right = dfuns[sindex+1];
			}	

			if(tx == 0 && i != 0)
			{
				left = df[n-1];

			}
			else if(tx != 0)
			{
				left = dfuns[sindex-1];
			}

			if(ds1.x == 1)
			{
				if(i == 0)
				{
					temp1 = cuCadd(df[n+1],df[n+1]);
					temp2 = cuCadd(cuCmul(two,df[n]),temp1);
					p1 = cuCmul(cuCmul(du,cuCmul(cx1,temp2)),difacr);
				}else
				{
					temp1 = cuCadd(df[n+1],df[n-1]);
					temp2 = cuCadd(cuCmul(two,df[n]),temp1);
					temp3 = cuCmul(d2dr,cuCadd(df[n+1],cuCmul(dmc1,df[n-1])));
					p1 = cuCmul(cuCadd(cuCmul(ddr[i],temp3),cuCmul(cx1,temp2)),difacr);
				}				
__syncthreads();
			}
			else
			{
				p1 = zero;
			}
		}

/*		if(k > 0 && k < (nt-1))
		{
			fp1 = df[n+nr];
*/
		if(k > is && k < ie)
		{
			if(commSize>1)  //DC Data Accessing
			{
				if(k==is+1 && commRank!=0)
				{
					fm1 = dfprev[indx+i];
				}else{
					fm1 = df[n-nr];
				}
				if(k==ie-1 && commRank!=commSize-1)
				{
					fp1 = dfnex[i];
				}else{
					fp1 = df[n+nr];
				}
			}
			else
			{   //End DC Data Accessing
				fm1 = df[n-nr];
				fp1 = df[n+nr];
			}
					
			if(ds5.x == 1)
			{
				ccjm1 = cuCmul(dmc1,cuConj(fm1));
				ccjp1 = cuConj(fp1);
				fm1 = cuCmul(dmc1,fm1);
				ab.x = cuCabs(dfuns[sindex]);
				ab.y = 0.0;

				temp1 = cuCmul(cuCadd(fp1,fm1),cuConj(dfuns[sindex]));
				temp2 = cuCmul(cuCadd(ccjp1,ccjm1),dfuns[sindex]);
				temp3 = cuCmul(cuCadd(temp1,temp2),dfuns[sindex]);
				tp1 = cuCmul(temp3,coe1);
				tp2 = cuCmul(cuCmul(cuCmul(ab,ab),cuCadd(fp1,fm1)),coe1);

				devt = cuCadd(tp1,tp2);
				devt = cuCmul(devt,dcon5);
				p5 = cuCadd(cuCmul(ds5,devt),cuCmul(cuCmul(cuCmul(ab,ab),dfuns[sindex]),difacn));
				
			}
			else
			{
				p5 = zero;
			}

			if(ds3.x == 1)
			{
				devt2[n] = cuCmul(coe2,cuCadd(cuCadd(fp1,fm1),cuCmul(two,dfuns[sindex])));
__syncthreads();
				if(commSize > 1) //DC Data Accessing
				{
					if(k==is+1 && commRank!=0)
					{
						dev2m1 = devt2prev[indx+i];
					}else{
						dev2m1 = devt2[n-nr];
					}
					if(k==ie-1 && commRank!=commSize-1)
					{
						dev2p1 = devt2nex[i];
					}else{
						dev2p1 = devt2[n+nr];
					}
				}   //End DC Data Accessing
				else
				{
					dev2m1 = devt2[n-nr];
					dev2p1 = devt2[n+nr];
				}
__syncthreads();
				temp1 = cuCmul(c1,devt2[n]);
				temp2 = cuCmul(c2,cuCadd(dev2p1,dev2m1));
				gvd = cuCadd(temp1,temp2);
				gvd = cuCmul(c4,gvd);

				p3 = cuCmul(ds3,gvd);
			}
			else
			{
				p3 = zero;
			}
		}

		if(ds2.x == 1)
		{
			ab.x = cuCabs(dfuns[sindex]);
			ab.y = 0.0;
			p2 = cuCmul(cuCmul(cuCmul(cuCmul(ab,ab),dfuns[sindex]),difacn),ds2);
		}
		else
		{
			p2 = zero;
		}

		if(ds4.x == 1)
		{
			consm.x = 1.0;
			consm.y = 0.0;
			for(mm = 0; mm < 2*(dmp-1); mm++)
			{
				consm.x = consm.x*cuCabs(dfuns[sindex]);
			}
			p4 = cuCmul(cuCmul(cuCmul(ds4,cons1),consm),dfuns[sindex]);
		}
		else
		{
			p4 = zero;
		}

		if(ds6.x == 1)
		{
			p6 = cuCmul(cuCmul(csig,drho[n]),dfuns[sindex]);
		}
		else
		{
			p6 = zero;
		}

		dtemp[n] = cuCadd(cuCadd(cuCadd(cuCadd(cuCadd(p1,p2),p3),p4),p5),p6);
//		dtemp[n] = cuCadd(cuCadd(cuCadd(cuCadd(p2,p3),p4),p5),p6);
	}    

}

//__global__ void final(cuDoubleComplex* df, cuDoubleComplex* dfold, cuDoubleComplex* k1, cuDoubleComplex* k2, cuDoubleComplex* k3, cuDoubleComplex* k4, cuDoubleComplex two1, int nr, int nt, double* dabs){
__global__ void final(cuDoubleComplex* df, cuDoubleComplex* dfold, cuDoubleComplex* k1, cuDoubleComplex* k2, cuDoubleComplex* k3, cuDoubleComplex* k4, cuDoubleComplex two1, int nr, int nt, double* dabs, int tstart, int tend)
{

	unsigned int k;
	unsigned int i = threadIdx.x + blockIdx.x*blockDim.x;

	unsigned int n;
	int sindex = threadIdx.x;

	const int SZ = (xthreads);

	__shared__ cuDoubleComplex dk1s[SZ]; 
	__shared__ cuDoubleComplex dk2s[SZ]; 
	__shared__ cuDoubleComplex dk3s[SZ]; 
	__shared__ cuDoubleComplex dk4s[SZ]; 
	__shared__ cuDoubleComplex dfolds[SZ]; 

	cuDoubleComplex p1 = zero;
	cuDoubleComplex p2 = zero;

//  	for (k = 0; k < nt; k++) {
  	for (k = tstart; k < tend; k++) 
	{
		n = i + k*nr;

      	dk1s[sindex]      = k1[n];
      	dk2s[sindex]      = k2[n];
      	dk3s[sindex]      = k3[n];
      	dk4s[sindex]      = k4[n];
      	dfolds[sindex]    = dfold[n];

__syncthreads();

		p1 = cuCadd(dk1s[sindex],cuCmul(two1,dk2s[sindex]));
		p2 = cuCadd(p1,cuCadd(cuCmul(two1,dk3s[sindex]),dk4s[sindex]));
		df[n] = cuCadd(dfolds[sindex],cuCmul(c11,p2)); 

__syncthreads();

		dfold[n] = df[n];
		dabs[n] = cuCabs(df[n]);
	}

}

__global__ void updaterho(int nr, int nt, cuDoubleComplex* df, cuDoubleComplex* drho, cuDoubleComplex* drhonex, int tstart, int tend, int commRank, int commSize)
{

	unsigned int k;
	unsigned int i = threadIdx.x + blockIdx.x*blockDim.x;

	unsigned int n;
	int po = 2*dmp;

	cuDoubleComplex fac1, fac2, fac3, dhalf, donesixth, dtwo, pow2drho;
	cuDoubleComplex p1, p2, p3, p1k2, p3k2, p1k3, p3k3, p1k4, p3k4;
	cuDoubleComplex dk1rho, dk2rho, dk3rho, dk4rho;

	dhalf.x = 0.5;
	dhalf.y = 0.0;

	donesixth.x = 1.0/6.0;
	donesixth.y = 0.0;

	dtwo.x = 2.0;
	dtwo.y = 0.0;

	int tp = -1;

// 	for (k = 0; k < nt-1; k++){
  	for (k = tstart; k < tend; k++) 
	{
		tp = tp + 1;
		n = i + tp*nr;
		if(ds6.x == 1)
		{
//			fac1.x = dconsp1*pow(cuCabs(df[n]),2);
//			fac1.y = 0.0;
			fac1.x = 0.0;
			fac1.y = 0.0;

			fac2.x = dconsp2*pow(cuCabs(df[n]),po);
			fac2.y = 0.0;

//			fac3.x = dconsp3;
//			fac3.y = 0.0;
			fac3.x = -fac2.x/5.4e18;
			fac3.y = 0.0;

		    	__syncthreads();

			pow2drho = cuCmul(drho[n],drho[n]);

			p1 = cuCmul(fac1,drho[n]);
			p2 = fac2;
//			p3 = cuCmul(fac3,pow2drho);
			p3 = cuCmul(fac3,drho[n]);

		    	__syncthreads();

			dk1rho = cuCmul(cuCadd(cuCadd(p1,p2),p3),ddt);

			p1k2 = cuCadd(drho[n],cuCmul(dhalf,dk1rho));
			p3k2 = cuCmul(p1k2,p1k2);

		    	__syncthreads();

//			dk2rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k2),p2),cuCmul(fac3,p3k2)),ddt);
			dk2rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k2),p2),cuCmul(fac3,p1k2)),ddt);

			p1k3 = cuCadd(drho[n],cuCmul(dhalf,dk2rho));
			p3k3 = cuCmul(p1k3,p1k3);

		    	__syncthreads();

//			dk3rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k3),p2),cuCmul(fac3,p3k3)),ddt);
			dk3rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k3),p2),cuCmul(fac3,p1k3)),ddt);

			p1k4 = cuCadd(drho[n],dk3rho);
			p3k4 = cuCmul(p1k4,p1k4);

		    	__syncthreads();

//			dk4rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k4),p2),cuCmul(fac3,p3k4)),ddt);
			dk4rho = cuCmul(cuCadd(cuCadd(cuCmul(fac1,p1k4),p2),cuCmul(fac3,p1k4)),ddt);

		    	__syncthreads();

			//---Data Accessing
			if(k==tend-1 && commRank!=commSize-1)
			{
//				drho[n+nr] = cuCadd(cuCmul(donesixth,cuCadd(cuCadd(dk1rho,cuCmul(dtwo,dk2rho)),cuCadd(dk4rho,cuCmul(dtwo,dk3rho)))),drho[n]);
				drhonex[i] = cuCadd(cuCmul(donesixth,cuCadd(cuCadd(dk1rho,cuCmul(dtwo,dk2rho)),cuCadd(dk4rho,cuCmul(dtwo,dk3rho)))),drho[n]);
			}
			if(k!=tend-1)
			{
//				drho[n+nr] = cuCadd(cuCmul(donesixth,cuCadd(cuCadd(dk1rho,cuCmul(dtwo,dk2rho)),cuCadd(dk4rho,cuCmul(dtwo,dk3rho)))),drho[n]);
				drho[n+nr] = cuCadd(cuCmul(donesixth,cuCadd(cuCadd(dk1rho,cuCmul(dtwo,dk2rho)),cuCadd(dk4rho,cuCmul(dtwo,dk3rho)))),drho[n]);
			}
		    	__syncthreads();
		}
//		if(k < (nt-1)){

//			drho[n+nx*ny] = cuCadd(cuCmul(ddt,fac2),drho[n]);
//		}

	}
}

__global__ void maxim(double* dmax, double* df0, double* df1, int mx0, int mx1, int mt, double E0){

	E0 = 1/E0;
	if(dmax[mt] < (df0[mx0-1]))
	{
		dmax[mt] = (df0[mx0-1]);
	}
	if(dmax[mt]  < (df1[mx1-1]))
	{
		dmax[mt] = (df1[mx1-1]);
	}
}

/*__global__ void maxim(double* dmax, double* dabs, int mx, int mt){

	dmax[mt] = dabs[mx-1];
}
*/
#endif // #ifndef _RK4_KERNEL_H_
